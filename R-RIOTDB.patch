diff --git a/src/main/eval.c b/src/main/eval.c
index 093e8ad..a945128 100644
--- a/src/main/eval.c
+++ b/src/main/eval.c
@@ -29,7 +29,7 @@
 #include <Defn.h>
 #include <Rinterface.h>
 #include <Fileio.h>
-
+#include "riotdb.h"
 
 #define ARGUSED(x) LEVELS(x)
 
@@ -431,6 +431,7 @@ SEXP eval(SEXP e, SEXP rho)
 	    PROTECT(tmp);
 	    tmp = eval(tmp, rho);
 	    SET_NAMED(tmp, 2);
+		riotdbIncRefCounter(tmp);
 	    UNPROTECT(1);
 	}
 	else if (!isNull(tmp) && NAMED(tmp) < 1)
@@ -1442,6 +1443,7 @@ SEXP attribute_hidden do_set(SEXP call, SEXP op, SEXP args, SEXP rho)
 	    }
 	    defineVar(CAR(args), s, rho);
 #endif
+		riotdbIncRefCounter(s);
 	    R_Visible = FALSE;
 	    return (s);
 	}
diff --git a/src/main/riotdb.h b/src/main/riotdb.h
new file mode 100644
index 0000000..41aef6c
--- /dev/null
+++ b/src/main/riotdb.h
@@ -0,0 +1,69 @@
+#ifndef _RIOTDB_H
+#define _RIOTDB_H
+
+#include <Rinterface.h>
+
+/* RDBVector Internal Structure */
+typedef struct structRDBVector
+{
+  unsigned long int metadataID;
+  char * tableName;
+  int dbSourceID;
+  int size;
+  int isView;
+  int refCounter;
+
+  unsigned short int  sxp_type;
+  unsigned short int  sxp_obj;
+  unsigned short int  sxp_named;
+  unsigned short int  sxp_gp;
+  unsigned short int  sxp_mark;
+  unsigned short int  sxp_debug;
+  unsigned short int  sxp_trace;
+  unsigned short int  sxp_spare;
+  unsigned short int  sxp_gcgen;
+  unsigned short int  sxp_gccls;
+
+} rdbVector;
+
+/* RDBMatrix Internal Structure */
+typedef struct structRDBMatrix
+{
+  unsigned long int metadataID;
+  char * tableName;
+  int dbSourceID;
+  int numRows;
+  int numCols;
+  int isView;
+  int refCounter;
+
+  unsigned short int  sxp_type;
+  unsigned short int  sxp_obj;
+  unsigned short int  sxp_named;
+  unsigned short int  sxp_gp;
+  unsigned short int  sxp_mark;
+  unsigned short int  sxp_debug;
+  unsigned short int  sxp_trace;
+  unsigned short int  sxp_spare;
+  unsigned short int  sxp_gcgen;
+  unsigned short int  sxp_gccls;
+
+} rdbMatrix;
+
+/* Reference counting for RIOTDB objects */
+void riotdbIncRefCounter(SEXP s)
+{
+	char *className = CHAR(asChar(getAttrib(s,R_ClassSymbol)));
+	if (strcmp(className,"dbvector")==0) 
+	{
+		rdbVector *info = (rdbVector*)RAW(R_do_slot(s,install("info")));
+		info->sxp_spare++;
+	}
+	else if (strcmp(className,"dbmatrix")==0) 
+	{
+		rdbMatrix *info = (rdbMatrix*)RAW(R_do_slot(s,install("info")));
+		info->sxp_spare++;
+	}
+}
+#endif
+
